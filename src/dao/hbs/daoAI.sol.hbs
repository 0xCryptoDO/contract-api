// created by cryptodo.app

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract Dao is ReentrancyGuard, ERC20, ConfirmedOwner {
    using EnumerableSet for EnumerableSet.AddressSet;
    using SafeERC20 for IERC20;
    using Address for address;
    using Address for address payable;
    using ECDSA for bytes32;

    uint32 public VOTING_DURATION = 3 days;

    EnumerableSet.AddressSet private adapters;

    address public lp = address(0);

    uint8 public quorum;

    string apiUrl;

    uint nonce = 0;

    address[] partners;
    uint256[] shares;

    struct Proposal {
        address target;
        bytes data;
        uint256 value;
        string discription;
        uint256 timestamp;
    }

    uint lastProposalId;

    mapping(uint => Proposal) proposals;

    mapping(uint => bool) proposalPreQuorum;

    struct ExecutedProposal {
        address target;
        bytes data;
        uint256 value;
        uint256 nonce;
        uint256 timestamp;
        uint256 executionTimestamp;
        bytes32 txHash;
        bytes[] sigs;
    }

    ExecutedProposal[] internal executedProposal;

    mapping(bytes32 => bool) public executedTx;

    bool public mintable = true;
    bool public burnable = true;

    event RequestQuorumStatus(bytes32 indexed requestId, uint id, bool status);

    event Executed(
        address indexed target,
        bytes data,
        uint256 value,
        uint256 indexed nonce,
        uint256 timestamp,
        uint256 executionTimestamp,
        bytes32 txHash
    );

    modifier onlyDao() {
        require(
            msg.sender == address(this),
            "DAO: this function is only for DAO"
        );
        _;
    }

    constructor(
        string memory _name,
        string memory _symbol,
        uint8 _quorum,
        address[] memory _partners,
        uint256[] memory _shares,
        string memory _apiUrl
    ) ERC20(_name, _symbol) ConfirmedOwner(msg.sender) {

        require(
            _quorum >= 1 && _quorum <= 100,
            "DAO: quorum should be 1 <= q <= 100"
        );

        quorum = _quorum;

        require(
            _partners.length > 0 && _partners.length == _shares.length,
            "DAO: shares distribution is invalid"
        );
        partners = _partners;
        shares = _shares;
        apiUrl = _apiUrl;

        apiUrl = _apiUrl;

        for (uint256 i = 0; i < _partners.length; i++) {
            _mint(_partners[i], _shares[i]);
        }

    }

    function addProposal(
        address target,
        bytes calldata data,
        uint256 value,
        string calldata discription
    ) external nonReentrant returns (uint thisId) {
        require(balanceOf(msg.sender) > 0, "DAO: only for members");
        thisId = lastProposalId++;
        uint256 timestamp = block.timestamp;
        proposals[thisId] = Proposal(target, data, value, discription, timestamp);
    
    }

    function execute(
                    uint256 _proposalId,                                
                    bytes[] memory _sigs                                                                                                
    ) external nonReentrant returns (bool) {

        require(balanceOf(msg.sender) > 0, "DAO: only for members");

        require(proposalPreQuorum[_proposalId], "DAO: preQuorum is not reached");

        Proposal memory proposal = getProposalById(_proposalId);
        address _target = proposal.target;
        bytes memory _data = proposal.data;
        uint256 _value = proposal.value;
        uint256 _timestamp = proposal.timestamp;
        uint256 _nonce = nonce;  
        require(
            _timestamp + VOTING_DURATION >= block.timestamp,
            "DAO: voting is over"
        );
        bytes32 txHash = getTxHash(_target, _data, _value, _nonce, _timestamp);

        require(!executedTx[txHash], "DAO: propose already executed");

        require(_checkSigs(_sigs, txHash), "DAO: quorum is not reached");

        executedTx[txHash] = true;

        executedProposal.push(
            ExecutedProposal({
                target: _target,
                data: _data,
                value: _value,
                nonce: _nonce,
                timestamp: _timestamp,
                executionTimestamp: block.timestamp,
                txHash: txHash,
                sigs: _sigs
            })
        );

        emit Executed(
            _target,
            _data,
            _value,
            _nonce,
            _timestamp,
            block.timestamp,
            txHash
        );
        
        nonce++;

        if (_data.length == 0) {
            payable(_target).sendValue(_value);
        } else {
            if (_value == 0) {
                _target.functionCall(_data);
            } else {
                _target.functionCallWithValue(_data, _value);
            }
        }

        return true;
    }

    function getTxHash(
        address _target,
        bytes memory _data,
        uint256 _value,
        uint256 _nonce,
        uint256 _timestamp
    ) public view returns (bytes32) {
        return
            keccak256(
                abi.encode(
                    address(this),
                    _target,
                    _data,
                    _value,
                    _nonce,
                    _timestamp,
                    block.chainid
                )
            );
    }

    function _checkSigs(bytes[] memory _sigs, bytes32 _txHash)
        public
        view
        returns (bool)
    {
        bytes32 ethSignedHash = _txHash.toEthSignedMessageHash();

        uint256 share = 0;

        address[] memory signers = new address[](_sigs.length);

        for (uint256 i = 0; i < _sigs.length; i++) {
            address signer = ethSignedHash.recover(_sigs[i]);

            signers[i] = signer;
        }

        require(!_hasDuplicate(signers), "DAO: signatures are not unique");

        for (uint256 i = 0; i < signers.length; i++) {
            share += balanceOf(signers[i]);
        }

        if (share * 100 < totalSupply() * quorum) {
            return false;
        }

        return true;
    }

    function burnLp(
        address _recipient,
        uint256 _share,
        address[] memory _tokens,
        address[] memory _adapters,
        address[] memory _pools
    ) external nonReentrant returns (bool) {
        require(lp != address(0), "DAO: LP not set yet");

        require(msg.sender == lp, "DAO: only for LP");

        require(
            !_hasDuplicate(_tokens),
            "DAO: duplicates are prohibited (tokens)"
        );

        for (uint256 i = 0; i < _tokens.length; i++) {
            require(
                _tokens[i] != lp && _tokens[i] != address(this),
                "DAO: LP and GT cannot be part of a share"
            );
        }

        require(_adapters.length == _pools.length, "DAO: adapters error");

        if (_adapters.length > 0) {
            uint256 length = _adapters.length;

            if (length > 1) {
                for (uint256 i = 0; i < length - 1; i++) {
                    for (uint256 j = i + 1; j < length; j++) {
                        require(
                            !(_adapters[i] == _adapters[j] &&
                                _pools[i] == _pools[j]),
                            "DAO: duplicates are prohibited (adapters)"
                        );
                    }
                }
            }
        }

        payable(_recipient).sendValue((address(this).balance * _share) / 1e18);

        if (_tokens.length > 0) {
            uint256[] memory _tokenShares = new uint256[](_tokens.length);

            for (uint256 i = 0; i < _tokens.length; i++) {
                _tokenShares[i] = ((IERC20(_tokens[i]).balanceOf(
                    address(this)
                ) * _share) / 1e18);
            }

            for (uint256 i = 0; i < _tokens.length; i++) {
                IERC20(_tokens[i]).safeTransfer(_recipient, _tokenShares[i]);
            }
        }

        if (_adapters.length > 0) {
            uint256 length = _adapters.length;

            for (uint256 i = 0; i < length; i++) {
                require(
                    adapters.contains(_adapters[i]),
                    "DAO: this is not an adapter"
                );

                bool b = IAdapter(_adapters[i]).withdraw(
                    _recipient,
                    _pools[i],
                    _share
                );

                require(b, "DAO: withdrawal error");
            }
        }

        return true;
    }

    function mint(address _to, uint256 _amount)
        external
        onlyDao
        returns (bool)
    {
        require(mintable, "DAO: GT minting is disabled");
        _mint(_to, _amount);
        return true;
    }

    function burn(address _to, uint256 _amount)
        external
        onlyDao
        returns (bool)
    {
        require(burnable, "DAO: GT burning is disabled");
        _burn(_to, _amount);
        return true;
    }

    function move(
        address _sender,
        address _recipient,
        uint256 _amount
    ) external onlyDao returns (bool) {
        _transfer(_sender, _recipient, _amount);
        return true;
    }

    function disableMinting() external onlyDao returns (bool) {
        mintable = false;
        return true;
    }

    function disableBurning() external onlyDao returns (bool) {
        burnable = false;
        return true;
    }

    function setLp(address _lp) external onlyDao returns (bool) {   // onlyDao check for feauture edit
        
        require(lp == address(0), "DAO: LP address has already been set");

        //require(msg.sender == shop, "DAO: only Shop can set LP");

        lp = _lp;

        return true;
    }

    function changeQuorum(uint8 _q) external onlyDao returns (bool) {
        require(_q >= 1 && _q <= 100, "DAO: quorum should be 1 <= q <= 100");

        quorum = _q;

        return true;
    }

    function getPartners()
        external
        view
        returns (address[] memory)
    {
        return partners;
    }

    function getShares()
        external
        view
        returns (uint256[] memory)
    {
        return shares;
    }

    function getProposalById(uint id)
        public
        view
        returns (Proposal memory)
    {
        return proposals[id];
    }

    function executedProposalByIndex(uint256 _index)
        external
        view
        returns (ExecutedProposal memory)
    {
        return executedProposal[_index];
    }

    function getExecutedProposal()
        external
        view
        returns (ExecutedProposal[] memory)
    {
        return executedProposal;
    }

    function numberOfAdapters() external view returns (uint256) {
        return adapters.length();
    }

    function containsAdapter(address a) external view returns (bool) {
        return adapters.contains(a);
    }

    function getAdapters() external view returns (address[] memory) {
        uint256 adaptersLength = adapters.length();

        if (adaptersLength == 0) {
            return new address[](0);
        } else {
            address[] memory adaptersArray = new address[](adaptersLength);

            for (uint256 i = 0; i < adaptersLength; i++) {
                adaptersArray[i] = adapters.at(i);
            }

            return adaptersArray;
        }
    }

    function toAsciiString(address x) internal pure returns (string memory) {
        bytes memory s = new bytes(40);
        for (uint i = 0; i < 20; i++) {
            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));
            bytes1 hi = bytes1(uint8(b) / 16);
            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));
            s[2*i] = char(hi);
            s[2*i+1] = char(lo);            
        }
        return string(s);
    }

    function char(bytes1 b) internal pure returns (bytes1 c) {
        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);
        else return bytes1(uint8(b) + 0x57);
    }

    function appendString(string memory _a, string memory _b, string memory _c) internal pure returns (string memory)  {
        return string(abi.encodePacked(_a, _b, _c));
    }

    function _hasDuplicate(address[] memory A) internal pure returns (bool) {
        if (A.length <= 1) {
            return false;
        } else {
            for (uint256 i = 0; i < A.length - 1; i++) {
                address current = A[i];
                for (uint256 j = i + 1; j < A.length; j++) {
                    if (current == A[j]) {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    function transfer(address, uint256) public pure override returns (bool) {
        revert("GT: transfer is prohibited");
    }

    function transferFrom(
        address,
        address,
        uint256
    ) public pure override returns (bool) {
        revert("GT: transferFrom is prohibited");
    }

    event Received(address indexed, uint256);

    receive() external payable {
        emit Received(msg.sender, msg.value);
    }

    function changeVotingDuration(uint32 _days)
        external onlyDao returns (bool) {
        require(_days >= 1 && _days <= 255, "DAO: Unsupported voting duration");
        VOTING_DURATION = _days * 1 days;
        return true;
    }

}
