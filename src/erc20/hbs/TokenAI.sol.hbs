// created by cryptodo.app

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
{{#if pause}}import "@openzeppelin/contracts/security/Pausable.sol";{{/if}}

contract {{contractName}} is
    Ownable,
    ERC20{{#if pause}}, Pausable{{/if}}
{
    constructor(
        address initialOwner_,
        string memory name_,
        string memory symbol_,
        uint8 decimals_,
        uint256 totalSupply_
    )
        Ownable()
        ERC20(name_, symbol_)
    {
        _mint(initialOwner_, totalSupply_ * (10 ** decimals_));
        transferOwnership(initialOwner_);
    }
       
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual override(ERC20) {{#if pause}}, Pausable{{/if}} {
        super._beforeTokenTransfer(from, to, amount);

        {{#if pause}}
        require(!paused(), "ERC20Pausable: token transfer while paused");
        {{/if}}
    }

    {{#if mint}}
    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }
    {{/if}}

    {{#if burn}}
    function burn(address from, uint256 amount) public onlyOwner {
        _burn(from, amount);
    }
    {{/if}}
}
