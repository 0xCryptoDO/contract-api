// created by cryptodo.app

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract {{contractName}} is Ownable {
    IERC20 public stakingToken;
    uint256[] public rewardRates; // array of annual reward rates in % for each tier
    uint256[] public lockPeriods; // array of staking periods in seconds for each tier
    uint256 public earlyWithdrawalPenalty; // early withdrawal penalty in %
    uint256 public minStake;
    uint256 public maxStake;
    bool public isEarlyWithdrawal;

    struct Stake {
        uint256 amount;
        uint256 startTime;
        uint256 tier;
    }

    mapping(address => Stake[]) public stakes;

    constructor(address _stakingToken, uint256 _minStake, uint256 _maxStake, bool _isEarlyWithdrawal,
        uint256 _earlyWithdrawalPenalty, uint256[] memory _lockPeriods, uint256[] memory _rewardRates
    ) {
        require(_rewardRates.length == _lockPeriods.length, "Reward rates and lock periods arrays must be of equal length");
        stakingToken = IERC20(_stakingToken);
        rewardRates = _rewardRates;
        lockPeriods = _lockPeriods;
        earlyWithdrawalPenalty = _earlyWithdrawalPenalty;
        minStake = _minStake;
        maxStake = _maxStake;
        isEarlyWithdrawal = _isEarlyWithdrawal;
    }

    function stake(uint256 _amount, uint256 _tier) public {
        require(_amount >= minStake, string.concat("The amount must be greater than minimum"));
        require(_amount <= maxStake, string.concat("The amount must be lower than maximum"));
        require(_tier < rewardRates.length, "Invalid tier");
        require(stakingToken.transferFrom(msg.sender, address(this), _amount), "Token transfer failed");
        stakes[msg.sender].push(Stake(_amount, block.timestamp, _tier));
    }

    function claimReward(uint256 stakeIndex) public {
        Stake storage userStake = stakes[msg.sender][stakeIndex];
        uint256 elapsedSeconds = block.timestamp - userStake.startTime;
        uint256 rewardAmount = (userStake.amount * elapsedSeconds * rewardRates[userStake.tier]) / (100 * 365 days);
        require(stakingToken.transfer(msg.sender, rewardAmount), "Token transfer failed");
    }

    function withdraw(uint256 stakeIndex) public {
        Stake storage userStake = stakes[msg.sender][stakeIndex];
        uint256 elapsedSeconds = block.timestamp - userStake.startTime;

        require(elapsedSeconds < lockPeriods[userStake.tier] || isEarlyWithdrawal, "Early withdrawal is not allowed");

        if (elapsedSeconds < lockPeriods[userStake.tier]) {
            uint256 penaltyAmount = (userStake.amount * earlyWithdrawalPenalty) / 10000;
            userStake.amount -= penaltyAmount;
        }

        require(stakingToken.transfer(msg.sender, userStake.amount), "Token transfer failed");
        userStake.amount = 0;
    }

    function setEarlyWithdrawalPenalty(uint256 newPenaltyPercent) public onlyOwner {
        require(newPenaltyPercent <= 10000, "Penalty cannot be more than 100%");
        earlyWithdrawalPenalty = newPenaltyPercent;
    }
}
