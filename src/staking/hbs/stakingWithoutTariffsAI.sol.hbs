// created by cryptodo.app

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract {{contractName}} is Ownable {
    IERC20 public stakingToken;
    uint256 public rewardRate; // annual reward rate in %
    uint256 public lockPeriod; // staking period in seconds
    uint256 public earlyWithdrawalPenalty; // early withdrawal penalty in %
    uint256 public minStake;
    uint256 public maxStake;
    bool public isEarlyWithdrawal;

    struct Stake {
        uint256 amount;
        uint256 startTime;
    }

    mapping(address => Stake[]) public stakes;

    constructor(address _stakingToken, uint256 _minStake, uint256 _maxStake, bool _isEarlyWithdrawal, uint256
        _earlyWithdrawalPenalty, uint256 _lockPeriod, uint256 _rewardRate
    ) {
        stakingToken = IERC20(_stakingToken);
        rewardRate = _rewardRate;
        lockPeriod = _lockPeriod;
        earlyWithdrawalPenalty = _earlyWithdrawalPenalty;
        minStake = _minStake;
        maxStake = _maxStake;
        isEarlyWithdrawal = _isEarlyWithdrawal;
    }

    function stake(uint256 _amount) public {
        require(_amount >= minStake, string.concat("The amount must be greater than minimum"));
        require(_amount <= maxStake, string.concat("The amount must be lower than maximum"));
        require(stakingToken.transferFrom(msg.sender, address(this), _amount), "Token transfer failed");
        stakes[msg.sender].push(Stake(_amount, block.timestamp));
    }

    function claimReward(uint256 stakeIndex) public {
        Stake storage userStake = stakes[msg.sender][stakeIndex];
        uint256 elapsedSeconds = block.timestamp - userStake.startTime;
        uint256 rewardAmount = (userStake.amount * elapsedSeconds * rewardRate) / (100 * 365 days);
        require(stakingToken.transfer(msg.sender, rewardAmount), "Token transfer failed");
    }

    function withdraw(uint256 stakeIndex) public {
        Stake storage userStake = stakes[msg.sender][stakeIndex];
        uint256 elapsedSeconds = block.timestamp - userStake.startTime;

        require(elapsedSeconds < lockPeriod || isEarlyWithdrawal, "Early withdrawal is not allowed");

        if (elapsedSeconds < lockPeriod) {
            uint256 penaltyAmount = (userStake.amount * earlyWithdrawalPenalty) / 10000;
            userStake.amount -= penaltyAmount;
        }

        require(stakingToken.transfer(msg.sender, userStake.amount), "Token transfer failed");
        userStake.amount = 0;
    }

    function setLockPeriod(uint256 newLockPeriod) public onlyOwner {
        lockPeriod = newLockPeriod;
    }

    function setMinStake(uint256 newMinStake) public onlyOwner {
        minStake = newMinStake;
    }

    function setMaxStake(uint256 newMaxStake) public onlyOwner {
        maxStake = newMaxStake;
    }

    function setEarlyWithdrawalPenalty(uint256 newPenaltyPercent) public onlyOwner {
        require(newPenaltyPercent <= 10000, "Penalty cannot be more than 100%");
        earlyWithdrawalPenalty = newPenaltyPercent;
    }
}
